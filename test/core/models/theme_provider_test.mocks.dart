// Mocks generated by Mockito 5.4.6 from annotations
// in loyalty_mobile_app/test/core/models/theme_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:loyalty_mobile_app/core/models/business_theme.dart' as _i2;
import 'package:loyalty_mobile_app/core/services/theme_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBusinessTheme_0 extends _i1.SmartFake implements _i2.BusinessTheme {
  _FakeBusinessTheme_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeService extends _i1.Mock implements _i3.ThemeService {
  MockThemeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BusinessTheme> fetchBusinessTheme(String? businessId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBusinessTheme,
          [businessId],
        ),
        returnValue: _i4.Future<_i2.BusinessTheme>.value(_FakeBusinessTheme_0(
          this,
          Invocation.method(
            #fetchBusinessTheme,
            [businessId],
          ),
        )),
      ) as _i4.Future<_i2.BusinessTheme>);

  @override
  _i4.Future<_i2.BusinessTheme> fetchDefaultTheme() => (super.noSuchMethod(
        Invocation.method(
          #fetchDefaultTheme,
          [],
        ),
        returnValue: _i4.Future<_i2.BusinessTheme>.value(_FakeBusinessTheme_0(
          this,
          Invocation.method(
            #fetchDefaultTheme,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BusinessTheme>);
}
